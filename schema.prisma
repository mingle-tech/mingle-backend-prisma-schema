generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider = "node node_modules/prisma-nestjs-graphql"
  output   = "../src/@generated/prisma-nestjs-graphql"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserAccount {
  userId           String   @id @default(uuid()) @db.Uuid
  email            String
  password         String
  createdTimestamp DateTime @default(now())
  updatedTimestamp DateTime @default(now())

  @@map("auth_credentials")
}

model User {
  id              String     @id @db.Uuid
  username        String
  name            String
  gender          UserGender
  birthDate       DateTime
  bio             String
  updateTimestamp DateTime   @default(now())

  momentsJoined MomentJoin[]
  votes         MomentVote[]
  invites       MomentInvite[]
  momentsHosted Moment[]
  posts         Post[]
  @@map("users")
}

enum UserGender {
  MALE
  FEMALE
  OTHER
}

model Moment {
  id                String                   @id @default(uuid()) @db.Uuid
  name              String
  description       String
  host              User                     @relation(fields: [hostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  hostId            String                   @db.Uuid
  startTimestamp    DateTime
  endTimestamp      DateTime
  createdTimestamp  DateTime                 @default(now())
  updatedTimestamp  DateTime                 @default(now())
  locationPoint     Unsupported("geography")
  locationFakepoint Unsupported("geography")
  locationRadius    Float
  category          MomentCategory           @relation(fields: [categoryId], references: [id])
  categoryId        String                   @db.Uuid
  invites           MomentInvite[]
  joins             MomentJoin[]
  votes             MomentVote[]
  posts             Post[]

  @@index([locationPoint])
  @@map("moments")
}

model MomentCategory {
  id       String           @id @default(uuid()) @db.Uuid
  name     String
  moments  Moment[]
  parent   MomentCategory?  @relation("CategorySubcategory", fields: [parentId], references: [id])
  parentId String?          @db.Uuid
  children MomentCategory[] @relation("CategorySubcategory")

  @@map("moment_categories")
}

model MomentInvite {
  id       String @id @default(uuid()) @db.Uuid
  moment   Moment @relation(fields: [momentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  momentId String @db.Uuid
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   String @db.Uuid

  @@map("moment_invites")
}

model MomentJoin {
  id       String @id @default(uuid()) @db.Uuid
  moment   Moment @relation(fields: [momentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  momentId String @db.Uuid
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   String @db.Uuid

  @@map("moment_joins")
}

model MomentVote {
  id       String         @id @default(uuid()) @db.Uuid
  moment   Moment         @relation(fields: [momentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  momentId String         @db.Uuid
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   String         @db.Uuid
  type     MomentVoteType

  @@map("moment_votes")
}

enum MomentVoteType {
  SKIP
  LIKE
}

model WaitlistEntry {
  email   String @id @unique
  name    String
  city    String
  country String

  @@map("waitlist_entry")
}

model Post {
  id       String   @id @default(uuid()) @db.Uuid
  type     PostType
  author   User     @relation(fields: [authorId], references: [id])
  authorId String   @db.Uuid
  moment   Moment   @relation(fields: [momentId], references: [id])
  momentId String   @db.Uuid

  @@map("posts")
}

enum PostType {
  MEDIA
  MOMENT_CREATED
  WILDCARD
}
